"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const CommandType_1 = __importDefault(require("../../utils/CommandType"));
exports.default = {
    description: "Specify which channels a command can be used in.",
    type: CommandType_1.default.SLASH,
    guildOnly: true,
    options: [
        {
            name: "command",
            description: "The command to restrict access to a specific channel.",
            required: true,
            type: discord_js_1.ApplicationCommandOptionType.String,
            autocomplete: true,
        },
        {
            name: "channel",
            description: "The channel to restrict the command to.",
            required: true,
            type: discord_js_1.ApplicationCommandOptionType.Channel,
        },
    ],
    autocomplete: (command) => {
        return [...command.instance.commandHandler.commands.keys()];
    },
    callback: async ({ instance, interaction, guild }) => {
        if (!guild ||
            (instance.defaultCommand.testOnly &&
                !instance.testServers.includes(guild?.id)))
            return "This default command is registered as test server only, and can only be ran on the test servers.";
        if (!instance.isConnectedToDB) {
            return {
                content: "This bot is not connected to a database which is required for this command. Please contact the bot owner.",
                ephemeral: true,
            };
        }
        // @ts-ignore
        const commandName = interaction?.options.getString("command");
        // @ts-ignore
        const channel = interaction?.options.getChannel("channel");
        const command = instance.commandHandler.commands.get(commandName.toLowerCase());
        if (!command)
            return {
                content: `The command "${commandName}" does not exist.`,
                ephemeral: true,
            };
        const { channelCommands } = instance.commandHandler;
        let availableChannels = [];
        const canRun = (await channelCommands.getAvailableChannels(guild.id, commandName)).includes(channel.id);
        if (canRun) {
            availableChannels = await channelCommands.remove(guild.id, commandName, channel.id);
        }
        else {
            availableChannels = await channelCommands.add(guild.id, commandName, channel.id);
        }
        if (availableChannels.length) {
            const channelNames = availableChannels.map((channelId) => `<#${channelId}> `);
            return `The command "${commandName}" can now only be used in the following channels: ${channelNames}`;
        }
        return `The command "${commandName}" can now be used in any channel.`;
    },
};
