"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const CommandType_1 = __importDefault(require("../../utils/CommandType"));
exports.default = {
    type: CommandType_1.default.SLASH,
    description: "List/Delete Guild/Global Slash Commands",
    guildOnly: true,
    ownerOnly: true,
    options: [
        {
            name: "list-all",
            description: "List all slash commands",
            type: discord_js_1.ApplicationCommandOptionType.Subcommand,
        },
        {
            name: "delete",
            description: "List all slash commands",
            type: discord_js_1.ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "level",
                    description: "The level of slash commands to delete(guild or global)",
                    type: discord_js_1.ApplicationCommandOptionType.String,
                    choices: [
                        {
                            name: "guild",
                            value: "guild",
                        },
                        {
                            name: "global",
                            value: "global",
                        },
                    ],
                    required: true,
                },
                {
                    name: "command-id",
                    description: 'The ID of the command to delete or "all" to delete all commands',
                    type: discord_js_1.ApplicationCommandOptionType.String,
                    required: true,
                },
            ],
        },
    ],
    deferReply: "ephemeral",
    callback: async ({ interaction, guild, instance }) => {
        if (!guild ||
            (instance.defaultCommand.testOnly &&
                !instance.testServers.includes(guild?.id)))
            return "This default command is registered as test server only, and can only be ran on the test servers.";
        try {
            if (!interaction)
                return "Error: Interaction not found";
            if (!guild)
                return "Error: Guild Only Command";
            const subCommand = interaction.options.getSubcommand();
            if (subCommand === "list-all") {
                const guildCommands = await guild.commands.fetch();
                let guildCommandsList = "";
                if (guildCommands.size === 0) {
                    guildCommandsList = "No Guild slash commands found";
                }
                guildCommands.forEach((command) => {
                    guildCommandsList += `${command.name} - ${command.id}\n`;
                });
                const globalCommands = await interaction.client.application.commands.fetch();
                let globalCommandsList = "";
                if (globalCommands.size === 0) {
                    globalCommandsList = "No Global slash commands found";
                }
                globalCommands.forEach((command) => {
                    globalCommandsList += `${command.name} - ${command.id}\n`;
                });
                const embed = new discord_js_1.EmbedBuilder()
                    .setTitle("Slash Commands")
                    .setDescription("List of all slash commands")
                    .addFields({
                    name: "Guild Commands",
                    value: guildCommandsList,
                }, {
                    name: "Global Commands",
                    value: globalCommandsList,
                })
                    .setColor("#49FF33")
                    .setTimestamp();
                await interaction.editReply({
                    embeds: [embed],
                });
                return;
            }
            else if (subCommand === "delete") {
                const commandToDelete = interaction.options.get("command-id", true).value;
                const level = interaction.options.get("level", true)
                    .value;
                if (commandToDelete === "all") {
                    return "Error: Not Implemented";
                    // if (level === "guild") {
                    //     const guildCommands = await guild.commands.fetch();
                    //     guildCommands.forEach(async (command) => {
                    //         interaction.editReply({
                    //             content: `Deleting command ${command.name} - ${command.id}`,
                    //         });
                    //         await command.delete();
                    //     });
                    //     return "Deleted all guild commands";
                    // } else if (level === "global") {
                    //     const globalCommands =
                    //         await interaction.client.application.commands.fetch();
                    //     globalCommands.forEach(async (command) => {
                    //         interaction.editReply({
                    //             content: `Deleting command ${command.name} - ${command.id}`,
                    //         });
                    //         await command.delete();
                    //     });
                    //     return "Deleted all global commands";
                    // }
                    // return;
                }
                if (level === "guild") {
                    const command = await guild.commands.fetch(commandToDelete);
                    await command.delete();
                    return `Deleted command ${command.name} - ${command.id}`;
                }
                else if (level === "global") {
                    const command = await interaction.client.application.commands.fetch(commandToDelete);
                    await command.delete();
                    return `Deleted command ${command.name} - ${command.id}`;
                }
                return "Error: Bad Request";
            }
            return "Error: Bad Request";
        }
        catch (err) {
            return `Error: ${err.message}`;
        }
    },
};
