"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommandType_1 = __importDefault(require("../../utils/CommandType"));
const discord_js_1 = require("discord.js");
const required_roles_schema_1 = __importDefault(require("../../models/required-roles-schema"));
module.exports = {
    name: "requiredroles",
    description: "Set the required roles for a command.",
    type: CommandType_1.default.SLASH,
    guildOnly: true,
    // delete: true,
    roles: [discord_js_1.PermissionFlagsBits.Administrator],
    options: [
        {
            name: "command",
            description: "The command to set the required roles for.",
            required: true,
            type: discord_js_1.ApplicationCommandOptionType.String,
            autocomplete: true,
        },
        {
            name: "role",
            description: "The role to set.",
            // required: true,
            type: discord_js_1.ApplicationCommandOptionType.Role,
        },
    ],
    autocomplete: (command) => {
        return [...command.instance.commandHandler.commands.keys()];
    },
    callback: async ({ instance, guild, args }) => {
        if (!guild ||
            (instance.defaultCommand.testOnly &&
                !instance.testServers.includes(guild?.id)))
            return "This default command is registered as test server only, and can only be ran on the test servers.";
        const [commandName, role] = args;
        const command = instance.commandHandler.commands.get(commandName);
        if (!command)
            return `Command "${commandName}" not found.`;
        const _id = guild.id + "-" + command.commandName;
        if (!role) {
            const document = await required_roles_schema_1.default.findById(_id);
            const roles = document && document.roles?.length
                ? document.roles.map((roleId) => `<@&${roleId}>`)
                : "None.";
            return {
                content: `The required roles for the command "${commandName}" are: ${roles}`,
                allowedMentions: {
                    roles: {},
                },
            };
        }
        const alreadyExists = await required_roles_schema_1.default.findOne({
            _id,
            roles: {
                $in: [role],
            },
        });
        if (alreadyExists) {
            //remove role
            await required_roles_schema_1.default.findOneAndUpdate({
                _id,
            }, {
                $pull: {
                    roles: role,
                },
            });
            return {
                content: `The role <@&${role}> has been removed from the command "${commandName}".`,
                allowedMentions: {
                    roles: {},
                },
                ephemeral: true,
            };
        }
        await required_roles_schema_1.default.findOneAndUpdate({
            _id,
        }, {
            _id,
            $addToSet: {
                roles: role,
            },
        }, {
            upsert: true,
        });
        return {
            content: `The role <@&${role}> has been added to the command "${commandName}".`,
            allowedMentions: {
                roles: {},
            },
            ephemeral: true,
        };
    },
};
