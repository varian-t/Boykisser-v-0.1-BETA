"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommandType_1 = __importDefault(require("../../utils/CommandType"));
const discord_js_1 = require("discord.js");
const required_permissions_schema_1 = __importDefault(require("../../models/required-permissions-schema"));
const clearAllPermissions = "Clear All Permissions";
module.exports = {
    name: "requiredPermissions",
    description: "Set the required permissions for a command.",
    type: CommandType_1.default.SLASH,
    guildOnly: true,
    permissions: [discord_js_1.PermissionFlagsBits.Administrator],
    options: [
        {
            name: "command",
            description: "The command to set the required permissions for.",
            required: true,
            type: discord_js_1.ApplicationCommandOptionType.String,
            autocomplete: true,
        },
        {
            name: "permission",
            description: "The permission to set.",
            // required: true,
            type: discord_js_1.ApplicationCommandOptionType.String,
            autocomplete: true,
        },
    ],
    autocomplete: (command, arg) => {
        if (arg === "command") {
            return [...command.instance.commandHandler.commands.keys()];
        }
        else if (arg === "permission") {
            return [clearAllPermissions, ...Object.keys(discord_js_1.PermissionFlagsBits)];
        }
    },
    callback: async ({ instance, guild, args }) => {
        if (!guild ||
            (instance.defaultCommand.testOnly &&
                !instance.testServers.includes(guild?.id)))
            return "This default command is registered as test server only, and can only be ran on the test servers.";
        const [commandName, permission] = args;
        const command = instance.commandHandler.commands.get(commandName);
        if (!command)
            return `Command "${commandName}" not found.`;
        const _id = guild.id + "-" + command.commandName;
        if (!permission) {
            const document = await required_permissions_schema_1.default.findById(_id);
            const permissions = document && document.permissions?.length
                ? document.permissions.join(", ")
                : "None.";
            return `Here are the permissions for "${commandName}": ${permissions}`;
        }
        if (permission === clearAllPermissions) {
            await required_permissions_schema_1.default.deleteOne({ _id });
            return `The command "${commandName}" no longer requires any permissions.`;
        }
        const alreadyExists = await required_permissions_schema_1.default.findOne({
            _id,
            permissions: {
                $in: [permission],
            },
        });
        if (alreadyExists) {
            //remove permission
            await required_permissions_schema_1.default.findOneAndUpdate({
                _id,
            }, {
                $pull: {
                    permissions: permission,
                },
            });
            return {
                content: `The permission "${permission}" has been removed from the command "${commandName}".`,
                ephemeral: true,
            };
        }
        await required_permissions_schema_1.default.findOneAndUpdate({
            _id,
        }, {
            _id,
            $addToSet: {
                permissions: permission,
            },
        }, {
            upsert: true,
        });
        return {
            content: `The permission "${permission}" has been added to the command "${commandName}".`,
            ephemeral: true,
        };
    },
};
