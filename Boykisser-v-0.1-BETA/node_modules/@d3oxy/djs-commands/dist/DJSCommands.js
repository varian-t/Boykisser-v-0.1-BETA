"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const chalk_1 = __importDefault(require("chalk"));
const CommandHandler_1 = __importDefault(require("./command-handler/CommandHandler"));
const EventHandler_1 = __importDefault(require("./event-handler/EventHandler"));
const Cooldowns_1 = __importDefault(require("./utils/Cooldowns"));
const FeaturesHandler_1 = __importDefault(require("./utils/FeaturesHandler"));
const DJSLogger_1 = __importDefault(require("./utils/DJSLogger"));
class Main {
    _client;
    _testServers;
    _botOwners;
    _cooldowns;
    _defaultCommand;
    _validations;
    _commandHandler;
    _eventHandler;
    _isConnectedToDB = false;
    _defaultPrefix;
    _antiCrash = false;
    DJSLogger;
    constructor(mainConfig) {
        this.DJSLogger = new DJSLogger_1.default();
        this.init(mainConfig);
    }
    async init(mainConfig) {
        //chalk Start
        const name = chalk_1.default.bold(chalk_1.default.cyan("D3OXY"));
        const lines = chalk_1.default.yellow("############################################");
        const line = chalk_1.default.yellow("#");
        const Title = chalk_1.default.red(chalk_1.default.underline(chalk_1.default.bold("DJS Commands")));
        let firstLine = `${lines}`;
        let secondLine = `${line}               ${Title}               ${line}`;
        let thirdLine = `${line}                                          ${line}`;
        let fourthLine = `${line}           The Bot Has Started!           ${line}`;
        let fifthLine = `${line}          Made with ❤️  by ${name}.          ${line}`;
        let sixthLine = `${lines}`;
        console.log(`
                ${firstLine}
                ${secondLine}
                ${thirdLine}
                ${fourthLine}
                ${fifthLine}
                ${sixthLine}
        `);
        //chalk End
        const { client, mongoUri, commandDir, featuresDir, testServers = [], botOwners = [], cooldownConfig = {}, defaultCommand = {}, events = {}, validations = {}, defaultPrefix = "!", antiCrash = false, } = mainConfig;
        if (!client) {
            // logToConsole(chalk.red())
            this.DJSLogger.error("A Discord Client is required to use DJSCommands.", true);
        }
        if (mongoUri) {
            await this.connectToMongo(mongoUri).then(() => {
                this.DJSLogger.success("Connected to MongoDB");
            });
        }
        else {
            this.DJSLogger.warn("No MongoDB URI provided. Any features that require a database will not function properly.");
        }
        if (antiCrash) {
            process.on("uncaughtException", (error, origin) => {
                console.log("----- Uncaught exception -----");
                console.log(error);
                console.log("----- Exception origin -----");
                console.log(origin);
            });
            process.on("unhandledRejection", (reason, promise) => {
                console.log("----- Unhandled Rejection at -----");
                console.log(promise);
                console.log("----- Reason -----");
                console.log(reason);
            });
        }
        this._client = client;
        testServers.forEach((serverId) => {
            if (this._client.guilds.cache.has(serverId))
                return;
            this.DJSLogger.warn(`The Guild ID "${serverId}" is not a valid Guild ID. Please check your config.`);
            testServers.splice(testServers.indexOf(serverId), 1);
        });
        this._testServers = testServers;
        this._botOwners = botOwners;
        this._defaultCommand = defaultCommand;
        this._validations = validations;
        this._defaultPrefix = defaultPrefix;
        this._antiCrash = antiCrash;
        this._cooldowns = new Cooldowns_1.default(this, {
            errorMessage: "Please wait {TIME} before doing that again.",
            botOwnersBypass: false,
            dbRequired: 300,
            ...cooldownConfig,
        });
        if (commandDir) {
            this._commandHandler = new CommandHandler_1.default(this, commandDir, client);
        }
        else {
            this.DJSLogger.warn("No command directory provided. No commands will be loaded.");
        }
        if (featuresDir) {
            new FeaturesHandler_1.default(this, featuresDir, client);
        }
        this._eventHandler = new EventHandler_1.default(this, events, client);
    }
    get client() {
        return this._client;
    }
    get testServers() {
        return this._testServers;
    }
    get botOwners() {
        return this._botOwners;
    }
    get cooldowns() {
        return this._cooldowns;
    }
    get defaultCommand() {
        return this._defaultCommand;
    }
    get commandHandler() {
        return this._commandHandler;
    }
    get eventHandler() {
        return this._eventHandler;
    }
    get validations() {
        return this._validations;
    }
    get isConnectedToDB() {
        return this._isConnectedToDB;
    }
    get defaultPrefix() {
        return this._defaultPrefix;
    }
    get antiCrash() {
        return this._antiCrash;
    }
    async connectToMongo(mongoUri) {
        await mongoose_1.default.connect(mongoUri, {
        // keepAlive: true,
        });
        this._isConnectedToDB = true;
    }
}
exports.default = Main;
